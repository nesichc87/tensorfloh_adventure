from gegner import begegne_gegner
from powerups import finde_powerup
from kampf import K√§mpfer, kampf
from story import erz√§hle_story
from raetsel import logik_raetsel
from minispiele import syntax_check
from utils import slow_print
from raetsel import speicher_r√§tsel

def vorbereiten(spieler):
     slow_print("\n‚ö° Vor dem Kampf hast du Zeit, dich vorzubereiten!")

     if speicher_r√§tsel():
        print("üõ°Ô∏è Deine Speicheroptimierung gibt dir einen Verteidigungs-Bonus!")
    
    print("\nPl√∂tzlich taucht ein Gegner auf!")
    begegne_gegner()

    # Story erz√§hlen
    erz√§hle_story()

    # R√§tsel l√∂sen
    if logik_raetsel():
        slow_print("üéÅ Du bekommst ein Bonus-Power-Up!")
    
    # Minispiel spielen
    if syntax_check():
        slow_print("üõ°Ô∏è Deine Verteidigung wurde verst√§rkt!")

    # Power-Up finden
    powerup = finde_powerup()
    choice = input(f"Willst du {powerup.name} nutzen? (ja/nein) ").strip().lower()

    if choice == "ja":
        boost = powerup.anwenden(spieler)
        return boost
    else:
        slow_print("Du verzichtest auf das Power-Up...")
        return 0


def sneak():
    slow_print("\nDu schleichst dich vorsichtig durch die dunklen Code-Schluchten...")
    begegne_gegner()

def attack():
    slow_print("\nDu springst auf die Python-Schlange zu!")
    slow_print("Doch sie weicht aus und wirft eine Endlosschleife auf dich!")
    choice = input("Willst du (1) die Schleife unterbrechen oder (2) debuggen? ").strip()

    if choice == "1":
        slow_print("\nDu entkommst der Schleife!")
    elif choice == "2":
        slow_print("\nDu erkennst den Fehler und l√∂st ihn! Die Python-Schlange wird schw√§cher...")
    else:
        slow_print("Ung√ºltige Eingabe. W√§hle 1 oder 2.")
        attack()
